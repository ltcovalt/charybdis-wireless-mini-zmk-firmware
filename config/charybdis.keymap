#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13
#define THUMBS 36 37 38 39 40
#define QUICK_TAP_MS 175

/* 
* behavior overlays 
*/
/* layer tap */

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* mod tap */

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    /*
 * 42 KEY MATRIX / LAYOUT MAPPING
 * ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
 * │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
 * │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
 * │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
 * ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
 *             ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             
 */

    behaviors {
        compatible = "zmk,behaviors";

        hrmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            label = "homerow_mod_right";
        };

        hrml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        lt_ph: lt_prefer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_PREFER_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
        };

        hrmr_hold_trigger: homerow_right_hold_trigger {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 36 37 38 39 40 21 22 19 20>;
            label = "Homerow Right - Hold Trigger";
        };

        hmrl_hold_trigger: homerow_left_hold_trigger {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <36 37 38 36 37 38 39 40 36 37 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 13 14 15 16>;
            label = "Homerow Left - Hold Trigger";
        };
    };

    combos {
        compatible = "zmk,combos";

        left_click_l {
            bindings = <&mkp LCLK>;
            key-positions = <16 15>;
            layers = <0 5 7 2 3>;
            require-prior-idle-ms = <100>;
        };

        right_click_l {
            bindings = <&mkp RCLK>;
            key-positions = <14 15>;
            layers = <0 5 7 2 3>;
            require-prior-idle-ms = <100>;
        };

        left_click_r {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
            require-prior-idle-ms = <100>;
        };

        right_click_r {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
            require-prior-idle-ms = <100>;
        };

        scroll_l {
            bindings = <&mo 6>;
            key-positions = <14 15 16>;
        };

        scroll_r {
            bindings = <&mo 6>;
            key-positions = <31 32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESCAPE        &kp Q                       &kp W                          &kp F           &kp P                 &kp B             &kp J           &kp L              &kp U          &kp Y                           &kp SQT                     &kp BACKSLASH
&lt 4 TAB         &hmrl_hold_trigger LCTRL A  &hmrl_hold_trigger LEFT_ALT R  &hrml LSHFT S   &hrml LEFT_COMMAND T  &kp G             &kp M           &hrmr RIGHT_GUI N  &hrmr RSHFT E  &hrmr_hold_trigger RIGHT_ALT I  &hrmr_hold_trigger RCTRL O  &lt 4 SQT
&kp LEFT_CONTROL  &kp Z                       &kp X                          &kp C           &kp D                 &kp V             &kp K           &kp H              &kp COMMA      &kp PERIOD                      &lt 7 SLASH                 &trans
                                                                             &kp LEFT_SHIFT  &lt 2 BACKSPACE       &lt_ph 3 ENTER    &lt_ph 3 ENTER  &lt 2 SPACE
            >;
        };

        GAME {
            bindings = <
&kp ESCAPE  &kp I           &kp Q  &kp W  &kp E      &kp R             &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB     &kp LEFT_SHIFT  &kp A  &kp S  &kp D      &kp F             &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL   &kp Z           &kp X  &kp C  &kp M      &kp V             &trans  &trans  &trans  &trans  &trans  &trans
                                   &mo 2  &kp SPACE  &lt_ph 3 ENTER    &trans  &trans
            >;
        };

        NAV {
            bindings = <
&kp ESC    &trans     &kp BSPC  &kp UP_ARROW  &kp DEL    &kp LBKT                &kp RBKT               &kp GRAVE       &kp PLUS       &kp PIPE          &kp COLON     &kp PIPE
&kp TAB    &kp LSHFT  &kp LEFT  &kp DOWN      &kp RIGHT  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp MINUS       &kp EQUAL      &kp BSLH          &kp SEMI      &kp DOUBLE_QUOTES
&kp LCTRL  &kp LGUI   &trans    &kp HOME      &kp END    &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp UNDERSCORE  &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION  &kp RET
                                &trans        &kp SPACE  &trans                  &trans                 &trans
            >;
        };

        NUM {
            bindings = <
&trans   &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans   &kp N1           &kp N2       &kp N3    &kp N4      &kp N5         &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&kp F12  &kp F1           &kp F2       &kp F3    &kp F4      &kp F5         &kp F6     &kp F7         &kp F8        &kp F9                &kp F10                &kp F11
                                       &trans    &trans      &trans         &trans     &trans
            >;
        };

        SYS {
            bindings = <
&trans       &to 0   &to 1         &trans      &trans      &trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans       &trans  &kp C_VOL_UP  &kp C_PP    &kp C_NEXT  &kp C_BRI_UP    &trans        &trans        &trans        &trans        &trans        &trans
&bootloader  &trans  &kp C_VOL_DN  &kp C_MUTE  &kp C_PREV  &kp C_BRI_DN    &trans        &trans        &trans        &trans        &trans        &bootloader
                                   &trans      &trans      &trans          &trans        &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SNIPE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
